From ff32f74bcb8a7a88d83a9968731937ccdcafb6cc Mon Sep 17 00:00:00 2001
From: Alex Sartan <asartan@pivotal.io>
Date: Thu, 1 Feb 2018 15:51:12 -0700
Subject: [PATCH 13/13] Add Steeltoe Management endpoints

---
 src/PalTracker/IOperationCounter.cs             | 13 ++++++++++
 src/PalTracker/OperationCounter.cs              | 31 ++++++++++++++++++++++
 src/PalTracker/PalTracker.csproj                |  1 +
 src/PalTracker/Startup.cs                       | 20 ++++++++++++++-
 src/PalTracker/TimeEntryController.cs           | 14 +++++++++-
 src/PalTracker/TimeEntryHealthContributor.cs    | 34 +++++++++++++++++++++++++
 src/PalTracker/TimeEntryInfoContributor.cs      | 22 ++++++++++++++++
 src/PalTracker/TrackedOperation.cs              | 11 ++++++++
 test/PalTrackerTests/TimeEntryControllerTest.cs | 14 +++++++++-
 9 files changed, 157 insertions(+), 3 deletions(-)
 create mode 100644 src/PalTracker/IOperationCounter.cs
 create mode 100644 src/PalTracker/OperationCounter.cs
 create mode 100644 src/PalTracker/TimeEntryHealthContributor.cs
 create mode 100644 src/PalTracker/TimeEntryInfoContributor.cs
 create mode 100644 src/PalTracker/TrackedOperation.cs

diff --git a/src/PalTracker/IOperationCounter.cs b/src/PalTracker/IOperationCounter.cs
new file mode 100644
index 0000000..0a9e25e
--- /dev/null
+++ b/src/PalTracker/IOperationCounter.cs
@@ -0,0 +1,13 @@
+﻿using System.Collections.Generic;
+
+namespace PalTracker
+{
+    public interface IOperationCounter<T>
+    {
+        void Increment(TrackedOperation operation);
+
+        IDictionary<TrackedOperation, int> GetCounts { get; }
+
+        string Name { get; }
+    }
+}
\ No newline at end of file
diff --git a/src/PalTracker/OperationCounter.cs b/src/PalTracker/OperationCounter.cs
new file mode 100644
index 0000000..1d5ac51
--- /dev/null
+++ b/src/PalTracker/OperationCounter.cs
@@ -0,0 +1,31 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Collections.Immutable;
+
+namespace PalTracker
+{
+    public class OperationCounter<T> : IOperationCounter<T>
+    {
+        private readonly IDictionary<TrackedOperation, int> _count;
+
+        public OperationCounter()
+        {
+            _count = new Dictionary<TrackedOperation, int>();
+
+            foreach (var action in Enum.GetValues(typeof(TrackedOperation)))
+            {
+                _count.Add((TrackedOperation) action, 0);
+            }
+        }
+
+        public void Increment(TrackedOperation operation)
+        {
+            _count[operation] = ++_count[operation];
+        }
+
+        public IDictionary<TrackedOperation, int> GetCounts =>
+            _count.ToImmutableDictionary();
+
+        public string Name => $"{typeof(T).Name}Operations";
+    }
+}
\ No newline at end of file
diff --git a/src/PalTracker/PalTracker.csproj b/src/PalTracker/PalTracker.csproj
index 4852180..05e154f 100644
--- a/src/PalTracker/PalTracker.csproj
+++ b/src/PalTracker/PalTracker.csproj
@@ -10,6 +10,7 @@
     <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.0.1" />
     <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="2.0.1" />
     <PackageReference Include="Steeltoe.CloudFoundry.Connector.EFCore" Version="2.0.0" />
+    <PackageReference Include="Steeltoe.Management.CloudFoundryCore" Version="2.0.1" />
   </ItemGroup>
   <ItemGroup>
     <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.2" />
diff --git a/src/PalTracker/Startup.cs b/src/PalTracker/Startup.cs
index 5b47ad3..3bf92dd 100644
--- a/src/PalTracker/Startup.cs
+++ b/src/PalTracker/Startup.cs
@@ -9,6 +9,12 @@ using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
 using Microsoft.Extensions.Options;
 using Steeltoe.CloudFoundry.Connector.MySql.EFCore;
+using Steeltoe.Management.CloudFoundry;
+using Steeltoe.Management.Endpoint.CloudFoundry;
+using Steeltoe.Management.Endpoint.Health;
+using Steeltoe.Management.Endpoint.Info;
+using Steeltoe.Management.Endpoint.Loggers;
+using Steeltoe.Management.Endpoint.Trace;
 
 namespace PalTracker
 {
@@ -39,6 +45,12 @@ namespace PalTracker
 
             services.AddScoped<ITimeEntryRepository, MySqlTimeEntryRepository>();
             services.AddDbContext<TimeEntryContext>(options => options.UseMySql(Configuration));
+
+            services.AddCloudFoundryActuators(Configuration);
+
+            services.AddSingleton<IOperationCounter<TimeEntry>, OperationCounter<TimeEntry>>();
+            services.AddSingleton<IHealthContributor, TimeEntryHealthContributor>();
+            services.AddSingleton<IInfoContributor, TimeEntryInfoContributor>();
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
@@ -50,6 +62,12 @@ namespace PalTracker
             }
 
             app.UseMvc();
+
+            app.UseCloudFoundryActuator();
+            app.UseInfoActuator();
+            app.UseHealthActuator();
+            app.UseLoggersActuator();
+            app.UseTraceActuator();
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/PalTracker/TimeEntryController.cs b/src/PalTracker/TimeEntryController.cs
index e26d222..c40c348 100644
--- a/src/PalTracker/TimeEntryController.cs
+++ b/src/PalTracker/TimeEntryController.cs
@@ -6,15 +6,19 @@ namespace PalTracker
     public class TimeEntryController : Controller
     {
         private readonly ITimeEntryRepository _repository;
+        private readonly IOperationCounter<TimeEntry> _operationCounter;
 
-        public TimeEntryController(ITimeEntryRepository repository)
+        public TimeEntryController(ITimeEntryRepository repository, IOperationCounter<TimeEntry> operationCounter)
         {
             _repository = repository;
+            _operationCounter = operationCounter;
         }
 
         [HttpPost]
         public IActionResult Create([FromBody] TimeEntry timeEntry)
         {
+            _operationCounter.Increment(TrackedOperation.Create);
+
             var createdTimeEntry = _repository.Create(timeEntry);
 
             return CreatedAtRoute("GetTimeEntry", new {id = createdTimeEntry.Id}, createdTimeEntry);
@@ -23,24 +27,32 @@ namespace PalTracker
         [HttpGet("{id}", Name = "GetTimeEntry")]
         public IActionResult Read(long id)
         {
+            _operationCounter.Increment(TrackedOperation.Read);
+
             return _repository.Contains(id) ? (IActionResult) Ok(_repository.Find(id)) : NotFound();
         }
 
         [HttpGet]
         public IActionResult List()
         {
+            _operationCounter.Increment(TrackedOperation.List);
+
             return Ok(_repository.List());
         }
 
         [HttpPut("{id}")]
         public IActionResult Update(long id, [FromBody] TimeEntry timeEntry)
         {
+            _operationCounter.Increment(TrackedOperation.Update);
+
             return _repository.Contains(id) ? (IActionResult) Ok(_repository.Update(id, timeEntry)) : NotFound();
         }
 
         [HttpDelete("{id}")]
         public IActionResult Delete(long id)
         {
+            _operationCounter.Increment(TrackedOperation.Delete);
+
             if (!_repository.Contains(id))
             {
                 return NotFound();
diff --git a/src/PalTracker/TimeEntryHealthContributor.cs b/src/PalTracker/TimeEntryHealthContributor.cs
new file mode 100644
index 0000000..4e51b0e
--- /dev/null
+++ b/src/PalTracker/TimeEntryHealthContributor.cs
@@ -0,0 +1,34 @@
+﻿using System.Linq;
+using Steeltoe.Management.Endpoint.Health;
+using static Steeltoe.Management.Endpoint.Health.HealthStatus;
+
+namespace PalTracker
+{
+    public class TimeEntryHealthContributor : IHealthContributor
+    {
+        private readonly ITimeEntryRepository _timeEntryRepository;
+        public const int MaxTimeEntries = 5;
+
+
+        public TimeEntryHealthContributor(ITimeEntryRepository timeEntryRepository)
+        {
+            _timeEntryRepository = timeEntryRepository;
+        }
+
+        public Health Health()
+        {
+            var count = _timeEntryRepository.List().Count();
+            var status = count < MaxTimeEntries ? UP : DOWN;
+
+            var health = new Health {Status = status};
+
+            health.Details.Add("threshold", MaxTimeEntries);
+            health.Details.Add("count", count);
+            health.Details.Add("status", status.ToString());
+
+            return health;
+        }
+
+        public string Id { get; } = "timeEntry";
+    }
+}
\ No newline at end of file
diff --git a/src/PalTracker/TimeEntryInfoContributor.cs b/src/PalTracker/TimeEntryInfoContributor.cs
new file mode 100644
index 0000000..8898656
--- /dev/null
+++ b/src/PalTracker/TimeEntryInfoContributor.cs
@@ -0,0 +1,22 @@
+﻿using Steeltoe.Management.Endpoint.Info;
+
+namespace PalTracker
+{
+    public class TimeEntryInfoContributor : IInfoContributor
+    {
+        private readonly IOperationCounter<TimeEntry> _operationCounter;
+
+        public TimeEntryInfoContributor(IOperationCounter<TimeEntry> operationCounter)
+        {
+            _operationCounter = operationCounter;
+        }
+
+        public void Contribute(IInfoBuilder builder)
+        {
+            builder.WithInfo(
+                _operationCounter.Name,
+                _operationCounter.GetCounts
+            );
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/PalTracker/TrackedOperation.cs b/src/PalTracker/TrackedOperation.cs
new file mode 100644
index 0000000..eef5260
--- /dev/null
+++ b/src/PalTracker/TrackedOperation.cs
@@ -0,0 +1,11 @@
+﻿namespace PalTracker
+{
+    public enum TrackedOperation
+    {
+        Create,
+        Read,
+        List,
+        Update,
+        Delete
+    }
+}
\ No newline at end of file
diff --git a/test/PalTrackerTests/TimeEntryControllerTest.cs b/test/PalTrackerTests/TimeEntryControllerTest.cs
index 772736d..f57d795 100644
--- a/test/PalTrackerTests/TimeEntryControllerTest.cs
+++ b/test/PalTrackerTests/TimeEntryControllerTest.cs
@@ -4,6 +4,7 @@ using Microsoft.AspNetCore.Mvc;
 using Moq;
 using PalTracker;
 using Xunit;
+using static Moq.Times;
 
 namespace PalTrackerTests
 {
@@ -11,11 +12,14 @@ namespace PalTrackerTests
     {
         private readonly TimeEntryController _controller;
         private readonly Mock<ITimeEntryRepository> _repository;
+        private readonly Mock<IOperationCounter<TimeEntry>> _operationCounter;
 
         public TimeEntryControllerTest()
         {
             _repository = new Mock<ITimeEntryRepository>();
-            _controller = new TimeEntryController(_repository.Object);
+            _operationCounter = new Mock<IOperationCounter<TimeEntry>>();
+            _controller = new TimeEntryController(_repository.Object, _operationCounter.Object);
+            _operationCounter.Setup(oc => oc.Increment(It.IsAny<TrackedOperation>()));
         }
 
         [Fact]
@@ -33,6 +37,7 @@ namespace PalTrackerTests
 
             Assert.Equal(expected, typedResponse.Value);
             Assert.Equal(200, typedResponse.StatusCode);
+            _operationCounter.Verify(oc => oc.Increment(TrackedOperation.Read), Once);
         }
 
         [Fact]
@@ -47,6 +52,7 @@ namespace PalTrackerTests
             var typedResponse = response as NotFoundResult;
 
             Assert.Equal(404, typedResponse.StatusCode);
+            _operationCounter.Verify(oc => oc.Increment(TrackedOperation.Read), Once);
         }
 
         [Fact]
@@ -65,6 +71,7 @@ namespace PalTrackerTests
             Assert.Equal(201, typedResponse.StatusCode);
             Assert.Equal("GetTimeEntry", typedResponse.RouteName);
             Assert.Equal(expected, typedResponse.Value);
+            _operationCounter.Verify(oc => oc.Increment(TrackedOperation.Create), Once);
         }
 
         [Fact]
@@ -86,6 +93,7 @@ namespace PalTrackerTests
 
             Assert.Equal(timeEntries, typedResponse.Value);
             Assert.Equal(200, typedResponse.StatusCode);
+            _operationCounter.Verify(oc => oc.Increment(TrackedOperation.List), Once);
         }
 
         [Fact]
@@ -105,6 +113,7 @@ namespace PalTrackerTests
 
             Assert.Equal(updated, typedResponse.Value);
             Assert.Equal(200, typedResponse.StatusCode);
+            _operationCounter.Verify(oc => oc.Increment(TrackedOperation.Update), Once);
         }
 
         [Fact]
@@ -121,6 +130,7 @@ namespace PalTrackerTests
             var typedResponse = response as NotFoundResult;
 
             Assert.Equal(404, typedResponse.StatusCode);
+            _operationCounter.Verify(oc => oc.Increment(TrackedOperation.Update), Once);
         }
 
         [Fact]
@@ -136,6 +146,7 @@ namespace PalTrackerTests
             var typedResponse = response as NoContentResult;
 
             Assert.Equal(204, typedResponse.StatusCode);
+            _operationCounter.Verify(oc => oc.Increment(TrackedOperation.Delete), Once);
         }
 
         [Fact]
@@ -150,6 +161,7 @@ namespace PalTrackerTests
             var typedResponse = response as NotFoundResult;
 
             Assert.Equal(404, typedResponse.StatusCode);
+            _operationCounter.Verify(oc => oc.Increment(TrackedOperation.Delete), Once);
         }
     }
 }
\ No newline at end of file
-- 
2.12.3

